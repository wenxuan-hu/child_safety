
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002638  08002638  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002638  08002638  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002638  08002638  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          000000f0  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1ea  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d58  00000000  00000000  0002d21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  0002ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005a8  00000000  00000000  0002f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002050d  00000000  00000000  0002fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000918b  00000000  00000000  0005008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc0d9  00000000  00000000  00059218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001152f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001814  00000000  00000000  00115344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002610 	.word	0x08002610

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002610 	.word	0x08002610

080001c8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80001cc:	4b14      	ldr	r3, [pc, #80]	; (8000220 <DWT_Delay_Init+0x58>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	4a13      	ldr	r2, [pc, #76]	; (8000220 <DWT_Delay_Init+0x58>)
 80001d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001d6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <DWT_Delay_Init+0x58>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <DWT_Delay_Init+0x58>)
 80001de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001e2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001ea:	f023 0301 	bic.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <DWT_Delay_Init+0x5c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000202:	bf00      	nop
     __ASM volatile ("NOP");
 8000204:	bf00      	nop
  __ASM volatile ("NOP");
 8000206:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <DWT_Delay_Init+0x5c>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000210:	2300      	movs	r3, #0
 8000212:	e000      	b.n	8000216 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000214:	2301      	movs	r3, #1
  }
}
 8000216:	4618      	mov	r0, r3
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	e000edf0 	.word	0xe000edf0
 8000224:	e0001000 	.word	0xe0001000

08000228 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <delay+0x40>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000236:	f001 fb9d 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0b      	ldr	r2, [pc, #44]	; (800026c <delay+0x44>)
 800023e:	fba2 2303 	umull	r2, r3, r2, r3
 8000242:	0c9b      	lsrs	r3, r3, #18
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	fb02 f303 	mul.w	r3, r2, r3
 800024a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800024c:	bf00      	nop
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <delay+0x40>)
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	1ad2      	subs	r2, r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	429a      	cmp	r2, r3
 800025a:	d3f8      	bcc.n	800024e <delay+0x26>
}
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	e0001000 	.word	0xe0001000
 800026c:	431bde83 	.word	0x431bde83

08000270 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027c:	f107 030c 	add.w	r3, r7, #12
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000290:	2301      	movs	r3, #1
 8000292:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2300      	movs	r3, #0
 8000296:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000298:	f107 030c 	add.w	r3, r7, #12
 800029c:	4619      	mov	r1, r3
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 fdac 	bl	8000dfc <HAL_GPIO_Init>
}
 80002a4:	bf00      	nop
 80002a6:	3720      	adds	r7, #32
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80002c8:	887b      	ldrh	r3, [r7, #2]
 80002ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80002d4:	f107 030c 	add.w	r3, r7, #12
 80002d8:	4619      	mov	r1, r3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 fd8e 	bl	8000dfc <HAL_GPIO_Init>
}
 80002e0:	bf00      	nop
 80002e2:	3720      	adds	r7, #32
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <DHT_Start>:


void DHT_Start (void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80002ec:	f7ff ff6c 	bl	80001c8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80002f0:	2102      	movs	r1, #2
 80002f2:	480d      	ldr	r0, [pc, #52]	; (8000328 <DHT_Start+0x40>)
 80002f4:	f7ff ffbc 	bl	8000270 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80002f8:	2200      	movs	r2, #0
 80002fa:	2102      	movs	r1, #2
 80002fc:	480a      	ldr	r0, [pc, #40]	; (8000328 <DHT_Start+0x40>)
 80002fe:	f000 ff31 	bl	8001164 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000302:	f244 6050 	movw	r0, #18000	; 0x4650
 8000306:	f7ff ff8f 	bl	8000228 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800030a:	2201      	movs	r2, #1
 800030c:	2102      	movs	r1, #2
 800030e:	4806      	ldr	r0, [pc, #24]	; (8000328 <DHT_Start+0x40>)
 8000310:	f000 ff28 	bl	8001164 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000314:	2014      	movs	r0, #20
 8000316:	f7ff ff87 	bl	8000228 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800031a:	2102      	movs	r1, #2
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <DHT_Start+0x40>)
 800031e:	f7ff ffc5 	bl	80002ac <Set_Pin_Input>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020000 	.word	0x40020000

0800032c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000336:	2028      	movs	r0, #40	; 0x28
 8000338:	f7ff ff76 	bl	8000228 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800033c:	2102      	movs	r1, #2
 800033e:	4811      	ldr	r0, [pc, #68]	; (8000384 <DHT_Check_Response+0x58>)
 8000340:	f000 fef8 	bl	8001134 <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d10e      	bne.n	8000368 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800034a:	2050      	movs	r0, #80	; 0x50
 800034c:	f7ff ff6c 	bl	8000228 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000350:	2102      	movs	r1, #2
 8000352:	480c      	ldr	r0, [pc, #48]	; (8000384 <DHT_Check_Response+0x58>)
 8000354:	f000 feee 	bl	8001134 <HAL_GPIO_ReadPin>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d002      	beq.n	8000364 <DHT_Check_Response+0x38>
 800035e:	2301      	movs	r3, #1
 8000360:	71fb      	strb	r3, [r7, #7]
 8000362:	e001      	b.n	8000368 <DHT_Check_Response+0x3c>
		else Response = -1;
 8000364:	23ff      	movs	r3, #255	; 0xff
 8000366:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000368:	bf00      	nop
 800036a:	2102      	movs	r1, #2
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <DHT_Check_Response+0x58>)
 800036e:	f000 fee1 	bl	8001134 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1f8      	bne.n	800036a <DHT_Check_Response+0x3e>

	return Response;
 8000378:	79fb      	ldrb	r3, [r7, #7]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40020000 	.word	0x40020000

08000388 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800038e:	2300      	movs	r3, #0
 8000390:	71bb      	strb	r3, [r7, #6]
 8000392:	e037      	b.n	8000404 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000394:	bf00      	nop
 8000396:	2102      	movs	r1, #2
 8000398:	481e      	ldr	r0, [pc, #120]	; (8000414 <DHT_Read+0x8c>)
 800039a:	f000 fecb 	bl	8001134 <HAL_GPIO_ReadPin>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f8      	beq.n	8000396 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80003a4:	2028      	movs	r0, #40	; 0x28
 80003a6:	f7ff ff3f 	bl	8000228 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80003aa:	2102      	movs	r1, #2
 80003ac:	4819      	ldr	r0, [pc, #100]	; (8000414 <DHT_Read+0x8c>)
 80003ae:	f000 fec1 	bl	8001134 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d10e      	bne.n	80003d6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	f1c3 0307 	rsb	r3, r3, #7
 80003be:	2201      	movs	r2, #1
 80003c0:	fa02 f303 	lsl.w	r3, r2, r3
 80003c4:	b25b      	sxtb	r3, r3
 80003c6:	43db      	mvns	r3, r3
 80003c8:	b25a      	sxtb	r2, r3
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	4013      	ands	r3, r2
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	e00b      	b.n	80003ee <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	f1c3 0307 	rsb	r3, r3, #7
 80003dc:	2201      	movs	r2, #1
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	b25a      	sxtb	r2, r3
 80003e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b25b      	sxtb	r3, r3
 80003ec:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80003ee:	bf00      	nop
 80003f0:	2102      	movs	r1, #2
 80003f2:	4808      	ldr	r0, [pc, #32]	; (8000414 <DHT_Read+0x8c>)
 80003f4:	f000 fe9e 	bl	8001134 <HAL_GPIO_ReadPin>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1f8      	bne.n	80003f0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	3301      	adds	r3, #1
 8000402:	71bb      	strb	r3, [r7, #6]
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	2b07      	cmp	r3, #7
 8000408:	d9c4      	bls.n	8000394 <DHT_Read+0xc>
	}
	return i;
 800040a:	79fb      	ldrb	r3, [r7, #7]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40020000 	.word	0x40020000

08000418 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000420:	f7ff ff62 	bl	80002e8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000424:	f7ff ff82 	bl	800032c <DHT_Check_Response>
 8000428:	4603      	mov	r3, r0
 800042a:	461a      	mov	r2, r3
 800042c:	4b23      	ldr	r3, [pc, #140]	; (80004bc <DHT_GetData+0xa4>)
 800042e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000430:	f7ff ffaa 	bl	8000388 <DHT_Read>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <DHT_GetData+0xa8>)
 800043a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800043c:	f7ff ffa4 	bl	8000388 <DHT_Read>
 8000440:	4603      	mov	r3, r0
 8000442:	461a      	mov	r2, r3
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <DHT_GetData+0xac>)
 8000446:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000448:	f7ff ff9e 	bl	8000388 <DHT_Read>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <DHT_GetData+0xb0>)
 8000452:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000454:	f7ff ff98 	bl	8000388 <DHT_Read>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <DHT_GetData+0xb4>)
 800045e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000460:	f7ff ff92 	bl	8000388 <DHT_Read>
 8000464:	4603      	mov	r3, r0
 8000466:	b29a      	uxth	r2, r3
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <DHT_GetData+0xb8>)
 800046a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <DHT_GetData+0xb8>)
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	4619      	mov	r1, r3
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <DHT_GetData+0xa8>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <DHT_GetData+0xac>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4413      	add	r3, r2
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <DHT_GetData+0xb0>)
 8000480:	7812      	ldrb	r2, [r2, #0]
 8000482:	4413      	add	r3, r2
 8000484:	4a11      	ldr	r2, [pc, #68]	; (80004cc <DHT_GetData+0xb4>)
 8000486:	7812      	ldrb	r2, [r2, #0]
 8000488:	4413      	add	r3, r2
 800048a:	4299      	cmp	r1, r3
 800048c:	d111      	bne.n	80004b2 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <DHT_GetData+0xb0>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	ee07 3a90 	vmov	s15, r3
 8000496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <DHT_GetData+0xa8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	ee07 3a90 	vmov	s15, r3
 80004a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000020 	.word	0x20000020
 80004c0:	20000022 	.word	0x20000022
 80004c4:	20000024 	.word	0x20000024
 80004c8:	20000023 	.word	0x20000023
 80004cc:	20000028 	.word	0x20000028
 80004d0:	20000026 	.word	0x20000026

080004d4 <main>:
uint8_t data2[1];
//char uart_buf[50];
//int uart_buf_len;

int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */
	//spi_dis;
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fae3 	bl	8000aa4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f885 	bl	80005ec <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f949 	bl	8000778 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e6:	f000 f8df 	bl	80006a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004ea:	f000 f913 	bl	8000714 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
//HAL_SPI_Receive_IT(&hspi1, &data_get, 1);

  /* USER CODE END 2 */

Init_OnBoard_LEDs();
 80004ee:	f000 f859 	bl	80005a4 <Init_OnBoard_LEDs>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

	  HAL_Delay(500);
 80004f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f6:	f000 fb2d 	bl	8000b54 <HAL_Delay>
	  DHT_GetData(&DHT11_Data);
 80004fa:	481f      	ldr	r0, [pc, #124]	; (8000578 <main+0xa4>)
 80004fc:	f7ff ff8c 	bl	8000418 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <main+0xa4>)
 8000502:	edd3 7a00 	vldr	s15, [r3]
 8000506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800050a:	edc7 7a01 	vstr	s15, [r7, #4]
 800050e:	793b      	ldrb	r3, [r7, #4]
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <main+0xa8>)
 8000514:	701a      	strb	r2, [r3, #0]
	  Humidity = DHT11_Data.Humidity;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <main+0xa4>)
 8000518:	edd3 7a01 	vldr	s15, [r3, #4]
 800051c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000520:	edc7 7a01 	vstr	s15, [r7, #4]
 8000524:	793b      	ldrb	r3, [r7, #4]
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0xac>)
 800052a:	701a      	strb	r2, [r3, #0]
	  /*if(Temperature > 10){
		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
	  }*/
	  //HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15,GPIO_PIN_RESET);
	  //HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
	  data_send = Temperature;
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0xa8>)
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <main+0xb0>)
 8000532:	701a      	strb	r2, [r3, #0]
	  data2[0] = Temperature;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <main+0xa8>)
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <main+0xb4>)
 800053a:	701a      	strb	r2, [r3, #0]
	  //data2[0] = 55;
	  spi_en;
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <main+0xb8>)
 8000542:	f000 fe0f 	bl	8001164 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive_IT(&hspi1, &data_get, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	4911      	ldr	r1, [pc, #68]	; (8000590 <main+0xbc>)
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <main+0xc0>)
 800054c:	f001 fbc0 	bl	8001cd0 <HAL_SPI_Receive_IT>
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15,GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000556:	4810      	ldr	r0, [pc, #64]	; (8000598 <main+0xc4>)
 8000558:	f000 fe04 	bl	8001164 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, data2, 1, 100000);
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <main+0xc8>)
 800055e:	2201      	movs	r2, #1
 8000560:	4909      	ldr	r1, [pc, #36]	; (8000588 <main+0xb4>)
 8000562:	480f      	ldr	r0, [pc, #60]	; (80005a0 <main+0xcc>)
 8000564:	f001 fa76 	bl	8001a54 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15,GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <main+0xc4>)
 8000570:	f000 fdf8 	bl	8001164 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000574:	e7bd      	b.n	80004f2 <main+0x1e>
 8000576:	bf00      	nop
 8000578:	20000088 	.word	0x20000088
 800057c:	20000085 	.word	0x20000085
 8000580:	200000ec 	.word	0x200000ec
 8000584:	20000021 	.word	0x20000021
 8000588:	20000084 	.word	0x20000084
 800058c:	40020000 	.word	0x40020000
 8000590:	20000090 	.word	0x20000090
 8000594:	20000094 	.word	0x20000094
 8000598:	40020c00 	.word	0x40020c00
 800059c:	000186a0 	.word	0x000186a0
 80005a0:	2000002c 	.word	0x2000002c

080005a4 <Init_OnBoard_LEDs>:
  /* USER CODE END 3 */
}


void Init_OnBoard_LEDs(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <Init_OnBoard_LEDs+0x40>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <Init_OnBoard_LEDs+0x40>)
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <Init_OnBoard_LEDs+0x40>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0308 	and.w	r3, r3, #8
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef BoardLEDs;
	BoardLEDs.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
	BoardLEDs.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005ce:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOD, &BoardLEDs);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <Init_OnBoard_LEDs+0x44>)
 80005d6:	f000 fc11 	bl	8000dfc <HAL_GPIO_Init>
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020c00 	.word	0x40020c00

080005ec <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f800 	bl	8002600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xb4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xb4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xb4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <SystemClock_Config+0xb8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <SystemClock_Config+0xb8>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <SystemClock_Config+0xb8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fd9b 	bl	8001198 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000668:	f000 f8ec 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ffe0 	bl	800164c <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000692:	f000 f8d7 	bl	8000844 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_SPI1_Init>:


/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI1_Init+0x64>)
 80006dc:	2238      	movs	r2, #56	; 0x38
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI1_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI1_Init+0x64>)
 80006fa:	f001 f947 	bl	800198c <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f89e 	bl	8000844 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000094 	.word	0x20000094
 8000710:	40013000 	.word	0x40013000

08000714 <MX_SPI2_Init>:

/* SPI2 init function */
static void MX_SPI2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_SPI2_Init+0x5c>)
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <MX_SPI2_Init+0x60>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI2_Init+0x5c>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_SPI2_Init+0x5c>)
 8000726:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800072a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_SPI2_Init+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI2_Init+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_SPI2_Init+0x5c>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI2_Init+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_SPI2_Init+0x5c>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI2_Init+0x5c>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_SPI2_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI2_Init+0x5c>)
 8000758:	220a      	movs	r2, #10
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_SPI2_Init+0x5c>)
 800075e:	f001 f915 	bl	800198c <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000768:	f000 f86c 	bl	8000844 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000002c 	.word	0x2000002c
 8000774:	40003800 	.word	0x40003800

08000778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0x88>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0x88>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_GPIO_Init+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_GPIO_Init+0x88>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_GPIO_Init+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_GPIO_Init+0x88>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <MX_GPIO_Init+0x88>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_GPIO_Init+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2110      	movs	r1, #16
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007d8:	f000 fcc4 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007dc:	2310      	movs	r3, #16
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0x8c>)
 80007f4:	f000 fb02 	bl	8000dfc <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000

08000808 <HAL_SPI_RxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance == hspi2.Instance)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_SPI_RxCpltCallback+0x30>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d109      	bne.n	8000830 <HAL_SPI_RxCpltCallback+0x28>
  {
		spi_dis;
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <HAL_SPI_RxCpltCallback+0x34>)
 8000822:	f000 fc9f 	bl	8001164 <HAL_GPIO_WritePin>
    HAL_SPI_Receive_IT(&hspi2, & data_get, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	4905      	ldr	r1, [pc, #20]	; (8000840 <HAL_SPI_RxCpltCallback+0x38>)
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <HAL_SPI_RxCpltCallback+0x30>)
 800082c:	f001 fa50 	bl	8001cd0 <HAL_SPI_Receive_IT>
  }
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000002c 	.word	0x2000002c
 800083c:	40020000 	.word	0x40020000
 8000840:	20000090 	.word	0x20000090

08000844 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x4>

0800084a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084e:	2003      	movs	r0, #3
 8000850:	f000 fa64 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	f06f 000b 	mvn.w	r0, #11
 800085c:	f000 fa69 	bl	8000d32 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	f06f 000a 	mvn.w	r0, #10
 8000868:	f000 fa63 	bl	8000d32 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	f06f 0009 	mvn.w	r0, #9
 8000874:	f000 fa5d 	bl	8000d32 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	f06f 0004 	mvn.w	r0, #4
 8000880:	f000 fa57 	bl	8000d32 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	f06f 0003 	mvn.w	r0, #3
 800088c:	f000 fa51 	bl	8000d32 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	f06f 0001 	mvn.w	r0, #1
 8000898:	f000 fa4b 	bl	8000d32 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	f000 fa45 	bl	8000d32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a28      	ldr	r2, [pc, #160]	; (800095c <HAL_SPI_MspInit+0xb0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d11e      	bne.n	80008fc <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <HAL_SPI_MspInit+0xb4>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a26      	ldr	r2, [pc, #152]	; (8000960 <HAL_SPI_MspInit+0xb4>)
 80008c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <HAL_SPI_MspInit+0xb4>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008da:	23e0      	movs	r3, #224	; 0xe0
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ea:	2305      	movs	r3, #5
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <HAL_SPI_MspInit+0xb8>)
 80008f6:	f000 fa81 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008fa:	e02b      	b.n	8000954 <HAL_SPI_MspInit+0xa8>
  else if(hspi->Instance==SPI2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_SPI_MspInit+0xbc>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d126      	bne.n	8000954 <HAL_SPI_MspInit+0xa8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_SPI_MspInit+0xb4>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_SPI_MspInit+0xb4>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_SPI_MspInit+0xb4>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000922:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000934:	2305      	movs	r3, #5
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_SPI_MspInit+0xc0>)
 8000940:	f000 fa5c 	bl	8000dfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2024      	movs	r0, #36	; 0x24
 800094a:	f000 f9f2 	bl	8000d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800094e:	2024      	movs	r0, #36	; 0x24
 8000950:	f000 fa0b 	bl	8000d6a <HAL_NVIC_EnableIRQ>
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013000 	.word	0x40013000
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	40003800 	.word	0x40003800
 800096c:	40020400 	.word	0x40020400

08000970 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f8ac 	bl	8000b20 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80009c8:	f000 f9e9 	bl	8000d9e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SPI2_IRQHandler>:

/**
* @brief This function handles SPI2 global interrupt.
*/
void SPI2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <SPI2_IRQHandler+0x10>)
 80009d6:	f001 faab 	bl	8001f30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000002c 	.word	0x2000002c

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <SystemInit+0x60>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <SystemInit+0x60>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <SystemInit+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <SystemInit+0x64>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <SystemInit+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SystemInit+0x64>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <SystemInit+0x64>)
 8000a10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <SystemInit+0x64>)
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <SystemInit+0x68>)
 8000a1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <SystemInit+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <SystemInit+0x64>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SystemInit+0x60>)
 8000a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a38:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	24003010 	.word	0x24003010

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
  ldr  r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffb3 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f001 fd9b 	bl	80025b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd27 	bl	80004d4 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a8c:	08002640 	.word	0x08002640
  ldr  r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a94:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000a98:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000a9c:	200000f4 	.word	0x200000f4

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f925 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff feb7 	bl	800084a <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_InitTick+0x30>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <HAL_InitTick+0x34>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	099b      	lsrs	r3, r3, #6
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f942 	bl	8000d86 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000b02:	2200      	movs	r2, #0
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b0a:	f000 f912 	bl	8000d32 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	10624dd3 	.word	0x10624dd3

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick++;
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <HAL_IncTick+0x18>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x18>)
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	200000f0 	.word	0x200000f0

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200000f0 	.word	0x200000f0

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000b60:	f7ff ffec 	bl	8000b3c <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffe8 	bl	8000b3c <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3f7      	bcc.n	8000b68 <HAL_Delay+0x14>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <NVIC_EnableIRQ+0x30>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da0b      	bge.n	8000c48 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <NVIC_SetPriority+0x4c>)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	3b04      	subs	r3, #4
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c46:	e009      	b.n	8000c5c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <NVIC_SetPriority+0x50>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f7ff ff8e 	bl	8000c1c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff2d 	bl	8000b84 <NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff42 	bl	8000bcc <NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff8e 	bl	8000c70 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff35 	bl	8000be8 <NVIC_EnableIRQ>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffa2 	bl	8000cd8 <SysTick_Config>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000da2:	f000 f802 	bl	8000daa <HAL_SYSTICK_Callback>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d004      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00c      	b.n	8000df0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2205      	movs	r2, #5
 8000dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0201 	bic.w	r2, r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e16b      	b.n	80010f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 815a 	bne.w	80010ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x4a>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b12      	cmp	r3, #18
 8000e44:	d123      	bne.n	8000e8e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	69b9      	ldr	r1, [r7, #24]
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0203 	and.w	r2, r3, #3
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d00b      	beq.n	8000ee2 <HAL_GPIO_Init+0xe6>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed6:	2b11      	cmp	r3, #17
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80b4 	beq.w	80010ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b60      	ldr	r3, [pc, #384]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a5f      	ldr	r2, [pc, #380]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a5b      	ldr	r2, [pc, #364]	; (800110c <HAL_GPIO_Init+0x310>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a52      	ldr	r2, [pc, #328]	; (8001110 <HAL_GPIO_Init+0x314>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x226>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a51      	ldr	r2, [pc, #324]	; (8001114 <HAL_GPIO_Init+0x318>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x222>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <HAL_GPIO_Init+0x31c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x21e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x320>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x21a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x216>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <HAL_GPIO_Init+0x328>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x212>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_GPIO_Init+0x32c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x20e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	; (800112c <HAL_GPIO_Init+0x330>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x20a>
 8001002:	2307      	movs	r3, #7
 8001004:	e00e      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001006:	2308      	movs	r3, #8
 8001008:	e00c      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100a:	2306      	movs	r3, #6
 800100c:	e00a      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100e:	2305      	movs	r3, #5
 8001010:	e008      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001012:	2304      	movs	r3, #4
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001016:	2303      	movs	r3, #3
 8001018:	e004      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101a:	2302      	movs	r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001022:	2300      	movs	r3, #0
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	f002 0203 	and.w	r2, r2, #3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4093      	lsls	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001034:	4935      	ldr	r1, [pc, #212]	; (800110c <HAL_GPIO_Init+0x310>)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001066:	4a32      	ldr	r2, [pc, #200]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <HAL_GPIO_Init+0x334>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_GPIO_Init+0x334>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_GPIO_Init+0x334>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <HAL_GPIO_Init+0x334>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	f67f ae90 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40013800 	.word	0x40013800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40021400 	.word	0x40021400
 8001128:	40021800 	.word	0x40021800
 800112c:	40021c00 	.word	0x40021c00
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e001      	b.n	8001156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001180:	e003      	b.n	800118a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d075      	beq.n	800129c <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b0:	4ba4      	ldr	r3, [pc, #656]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d00c      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011bc:	4ba1      	ldr	r3, [pc, #644]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d112      	bne.n	80011ee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c8:	4b9e      	ldr	r3, [pc, #632]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d4:	d10b      	bne.n	80011ee <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d6:	4b9b      	ldr	r3, [pc, #620]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d05b      	beq.n	800129a <HAL_RCC_OscConfig+0x102>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d157      	bne.n	800129a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e224      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x6e>
 80011f8:	4b92      	ldr	r3, [pc, #584]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a91      	ldr	r2, [pc, #580]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e01d      	b.n	8001242 <HAL_RCC_OscConfig+0xaa>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120e:	d10c      	bne.n	800122a <HAL_RCC_OscConfig+0x92>
 8001210:	4b8c      	ldr	r3, [pc, #560]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a8b      	ldr	r2, [pc, #556]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b89      	ldr	r3, [pc, #548]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a88      	ldr	r2, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e00b      	b.n	8001242 <HAL_RCC_OscConfig+0xaa>
 800122a:	4b86      	ldr	r3, [pc, #536]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a85      	ldr	r2, [pc, #532]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b83      	ldr	r3, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a82      	ldr	r2, [pc, #520]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d013      	beq.n	8001272 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff fc77 	bl	8000b3c <HAL_GetTick>
 800124e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001252:	f7ff fc73 	bl	8000b3c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1e9      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001264:	4b77      	ldr	r3, [pc, #476]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0xba>
 8001270:	e014      	b.n	800129c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc63 	bl	8000b3c <HAL_GetTick>
 8001276:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127a:	f7ff fc5f 	bl	8000b3c <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1d5      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128c:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0xe2>
 8001298:	e000      	b.n	800129c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d077      	beq.n	8001398 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b4:	4b63      	ldr	r3, [pc, #396]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d126      	bne.n	800130e <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c0:	4b60      	ldr	r3, [pc, #384]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d120      	bne.n	800130e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012cc:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x14c>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e1a9      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b57      	ldr	r3, [pc, #348]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6919      	ldr	r1, [r3, #16]
 80012f0:	23f8      	movs	r3, #248	; 0xf8
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	494f      	ldr	r1, [pc, #316]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130c:	e044      	b.n	8001398 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d02a      	beq.n	800136c <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001316:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fc0e 	bl	8000b3c <HAL_GetTick>
 8001320:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fc0a 	bl	8000b3c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e180      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6919      	ldr	r1, [r3, #16]
 800134e:	23f8      	movs	r3, #248	; 0xf8
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	4937      	ldr	r1, [pc, #220]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
 800136a:	e015      	b.n	8001398 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fbe3 	bl	8000b3c <HAL_GetTick>
 8001376:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fbdf 	bl	8000b3c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e155      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d030      	beq.n	8001406 <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d016      	beq.n	80013da <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbc3 	bl	8000b3c <HAL_GetTick>
 80013b6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fbbf 	bl	8000b3c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e135      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x222>
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fbac 	bl	8000b3c <HAL_GetTick>
 80013e4:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff fba8 	bl	8000b3c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e11e      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8086 	beq.w	8001520 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a09      	ldr	r2, [pc, #36]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001422:	6413      	str	r3, [r2, #64]	; 0x40
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143a:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800143c:	f7ff fb7e 	bl	8000b3c <HAL_GetTick>
 8001440:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001442:	e010      	b.n	8001466 <HAL_RCC_OscConfig+0x2ce>
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
 8001450:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7ff fb72 	bl	8000b3c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0e8      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001466:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x4a8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x2f0>
 800147a:	4b72      	ldr	r3, [pc, #456]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a71      	ldr	r2, [pc, #452]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	e01c      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0x312>
 8001490:	4b6c      	ldr	r3, [pc, #432]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a6b      	ldr	r2, [pc, #428]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a68      	ldr	r2, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	e00b      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 80014aa:	4b66      	ldr	r3, [pc, #408]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a62      	ldr	r2, [pc, #392]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d015      	beq.n	80014f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fb37 	bl	8000b3c <HAL_GetTick>
 80014ce:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fb33 	bl	8000b3c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0a7      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0ee      	beq.n	80014d2 <HAL_RCC_OscConfig+0x33a>
 80014f4:	e014      	b.n	8001520 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb21 	bl	8000b3c <HAL_GetTick>
 80014fa:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fb1d 	bl	8000b3c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e091      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ee      	bne.n	80014fe <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8086 	beq.w	8001636 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d07d      	beq.n	8001632 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d162      	bne.n	8001604 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b42      	ldr	r3, [pc, #264]	; (8001648 <HAL_RCC_OscConfig+0x4b0>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fafa 	bl	8000b3c <HAL_GetTick>
 8001548:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff faf6 	bl	8000b3c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e06c      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	4b39      	ldr	r3, [pc, #228]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800157c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	60fb      	str	r3, [r7, #12]
  return(result);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	085b      	lsrs	r3, r3, #1
 8001598:	1e59      	subs	r1, r3, #1
 800159a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800159e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	617b      	str	r3, [r7, #20]
  return(result);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80015bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	491c      	ldr	r1, [pc, #112]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCC_OscConfig+0x4b0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff faae 	bl	8000b3c <HAL_GetTick>
 80015e0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff faaa 	bl	8000b3c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e020      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x44c>
 8001602:	e018      	b.n	8001636 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x4b0>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fa97 	bl	8000b3c <HAL_GetTick>
 800160e:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fa93 	bl	8000b3c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e009      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <HAL_RCC_OscConfig+0x4ac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x47a>
 8001630:	e001      	b.n	8001636 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3738      	adds	r7, #56	; 0x38
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40007000 	.word	0x40007000
 8001644:	40023800 	.word	0x40023800
 8001648:	42470060 	.word	0x42470060

0800164c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800165a:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_ClockConfig+0x214>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d90c      	bls.n	8001682 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001668:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <HAL_RCC_ClockConfig+0x214>)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001670:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_ClockConfig+0x214>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0ea      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168e:	4b75      	ldr	r3, [pc, #468]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4972      	ldr	r1, [pc, #456]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 8086 	beq.w	80017ba <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0c8      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0b8      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0b0      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4958      	ldr	r1, [pc, #352]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001708:	f7ff fa18 	bl	8000b3c <HAL_GetTick>
 800170c:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d112      	bne.n	800173c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff fa10 	bl	8000b3c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e094      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800172e:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b04      	cmp	r3, #4
 8001738:	d1ee      	bne.n	8001718 <HAL_RCC_ClockConfig+0xcc>
 800173a:	e03e      	b.n	80017ba <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d112      	bne.n	800176a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001744:	e00a      	b.n	800175c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001746:	f7ff f9f9 	bl	8000b3c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e07d      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d1ee      	bne.n	8001746 <HAL_RCC_ClockConfig+0xfa>
 8001768:	e027      	b.n	80017ba <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d11d      	bne.n	80017ae <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff f9e2 	bl	8000b3c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e066      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d1ee      	bne.n	8001774 <HAL_RCC_ClockConfig+0x128>
 8001796:	e010      	b.n	80017ba <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f7ff f9d0 	bl	8000b3c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e054      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ee      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_RCC_ClockConfig+0x214>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d20c      	bcs.n	80017e2 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_RCC_ClockConfig+0x214>)
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_RCC_ClockConfig+0x214>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e03a      	b.n	8001858 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	491a      	ldr	r1, [pc, #104]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4912      	ldr	r1, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001820:	f000 f826 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8001824:	4601      	mov	r1, r0
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_RCC_ClockConfig+0x218>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800182e:	23f0      	movs	r3, #240	; 0xf0
 8001830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	60fb      	str	r3, [r7, #12]
  return(result);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_RCC_ClockConfig+0x21c>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	fa21 f303 	lsr.w	r3, r1, r3
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_RCC_ClockConfig+0x220>)
 800184e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff f949 	bl	8000ae8 <HAL_InitTick>
  
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	08002628 	.word	0x08002628
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b08b      	sub	sp, #44	; 0x2c
 8001874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	d00c      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x3c>
 8001892:	2b08      	cmp	r3, #8
 8001894:	d85d      	bhi.n	8001952 <HAL_RCC_GetSysClockFreq+0xe2>
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x30>
 800189a:	2b04      	cmp	r3, #4
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x36>
 800189e:	e058      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_RCC_GetSysClockFreq+0xfc>)
 80018a2:	623b      	str	r3, [r7, #32]
       break;
 80018a4:	e058      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_RCC_GetSysClockFreq+0x100>)
 80018a8:	623b      	str	r3, [r7, #32]
      break;
 80018aa:	e055      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b4:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d017      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80018c2:	4a2b      	ldr	r2, [pc, #172]	; (8001970 <HAL_RCC_GetSysClockFreq+0x100>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018cc:	6859      	ldr	r1, [r3, #4]
 80018ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d2:	400b      	ands	r3, r1
 80018d4:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80018d8:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	6979      	ldr	r1, [r7, #20]
 80018dc:	fa91 f1a1 	rbit	r1, r1
 80018e0:	6139      	str	r1, [r7, #16]
  return(result);
 80018e2:	6939      	ldr	r1, [r7, #16]
 80018e4:	fab1 f181 	clz	r1, r1
 80018e8:	40cb      	lsrs	r3, r1
 80018ea:	fb03 f302 	mul.w	r3, r3, r2
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	e016      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_RCC_GetSysClockFreq+0xfc>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fc:	6859      	ldr	r1, [r3, #4]
 80018fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001902:	400b      	ands	r3, r1
 8001904:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001908:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	68f9      	ldr	r1, [r7, #12]
 800190c:	fa91 f1a1 	rbit	r1, r1
 8001910:	60b9      	str	r1, [r7, #8]
  return(result);
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	fab1 f181 	clz	r1, r1
 8001918:	40cb      	lsrs	r3, r1
 800191a:	fb03 f302 	mul.w	r3, r3, r2
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001928:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800192c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	603b      	str	r3, [r7, #0]
  return(result);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	3301      	adds	r3, #1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	623b      	str	r3, [r7, #32]
      break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001954:	623b      	str	r3, [r7, #32]
      break;
 8001956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001958:	6a3b      	ldr	r3, [r7, #32]
}
 800195a:	4618      	mov	r0, r3
 800195c:	372c      	adds	r7, #44	; 0x2c
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	00f42400 	.word	0x00f42400
 8001970:	007a1200 	.word	0x007a1200

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_RCC_GetHCLKFreq+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e056      	b.n	8001a4c <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d106      	bne.n	80019be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7fe ff77 	bl	80008ac <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	ea42 0103 	orr.w	r1, r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	f003 0104 	and.w	r1, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3a:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_SPI_Transmit+0x26>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e125      	b.n	8001cc6 <HAL_SPI_Transmit+0x272>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a82:	f7ff f85b 	bl	8000b3c <HAL_GetTick>
 8001a86:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d002      	beq.n	8001a9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a94:	2302      	movs	r3, #2
 8001a96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a98:	e10c      	b.n	8001cb4 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_SPI_Transmit+0x52>
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001aaa:	e103      	b.n	8001cb4 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af2:	d107      	bne.n	8001b04 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	2b40      	cmp	r3, #64	; 0x40
 8001b10:	d007      	beq.n	8001b22 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2a:	d147      	bne.n	8001bbc <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_SPI_Transmit+0xea>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d138      	bne.n	8001bb0 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b5c:	e028      	b.n	8001bb0 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d10f      	bne.n	8001b8c <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	881a      	ldrh	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3302      	adds	r3, #2
 8001b7a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b8a:	e011      	b.n	8001bb0 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <HAL_SPI_Transmit+0x156>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b98:	d00a      	beq.n	8001bb0 <HAL_SPI_Transmit+0x15c>
 8001b9a:	f7fe ffcf 	bl	8000b3c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d802      	bhi.n	8001bb0 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bae:	e081      	b.n	8001cb4 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1d1      	bne.n	8001b5e <HAL_SPI_Transmit+0x10a>
 8001bba:	e048      	b.n	8001c4e <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_SPI_Transmit+0x17a>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d13a      	bne.n	8001c44 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	330c      	adds	r3, #12
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bee:	e029      	b.n	8001c44 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d110      	bne.n	8001c20 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	330c      	adds	r3, #12
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c1e:	e011      	b.n	8001c44 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_SPI_Transmit+0x1ea>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c2c:	d00a      	beq.n	8001c44 <HAL_SPI_Transmit+0x1f0>
 8001c2e:	f7fe ff85 	bl	8000b3c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d802      	bhi.n	8001c44 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c42:	e037      	b.n	8001cb4 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1d0      	bne.n	8001bf0 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	2102      	movs	r1, #2
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fb6c 	bl	8002336 <SPI_WaitFlagStateUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c68:	e024      	b.n	8001cb4 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fbca 	bl	8002408 <SPI_CheckFlag_BSY>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2220      	movs	r2, #32
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c84:	e016      	b.n	8001cb4 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	77fb      	strb	r3, [r7, #31]
 8001cb0:	e000      	b.n	8001cb4 <HAL_SPI_Transmit+0x260>
  }

error:
 8001cb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d110      	bne.n	8001d0c <HAL_SPI_Receive_IT+0x3c>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cf2:	d10b      	bne.n	8001d0c <HAL_SPI_Receive_IT+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f87a 	bl	8001dfc <HAL_SPI_TransmitReceive_IT>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	e06e      	b.n	8001dea <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_SPI_Receive_IT+0x4a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e067      	b.n	8001dea <HAL_SPI_Receive_IT+0x11a>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d002      	beq.n	8001d34 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d32:	e055      	b.n	8001de0 <HAL_SPI_Receive_IT+0x110>
  }

  if((pData == NULL) || (Size == 0U))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_SPI_Receive_IT+0x70>
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d44:	e04c      	b.n	8001de0 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_SPI_Receive_IT+0x124>)
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d8c:	e002      	b.n	8001d94 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_SPI_Receive_IT+0x128>)
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9c:	d107      	bne.n	8001dae <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001dbc:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d008      	beq.n	8001dde <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e000      	b.n	8001de0 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8001dde:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	080022f1 	.word	0x080022f1
 8001df8:	080022ab 	.word	0x080022ab

08001dfc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size: amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_SPI_TransmitReceive_IT+0x28>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e076      	b.n	8001f12 <HAL_SPI_TransmitReceive_IT+0x116>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	617b      	str	r3, [r7, #20]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d00d      	beq.n	8001e5e <HAL_SPI_TransmitReceive_IT+0x62>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e48:	d106      	bne.n	8001e58 <HAL_SPI_TransmitReceive_IT+0x5c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <HAL_SPI_TransmitReceive_IT+0x5c>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d002      	beq.n	8001e5e <HAL_SPI_TransmitReceive_IT+0x62>
  {
    errorcode = HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e5c:	e054      	b.n	8001f08 <HAL_SPI_TransmitReceive_IT+0x10c>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_SPI_TransmitReceive_IT+0x74>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_SPI_TransmitReceive_IT+0x74>
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <HAL_SPI_TransmitReceive_IT+0x7a>
  {
    errorcode = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e74:	e048      	b.n	8001f08 <HAL_SPI_TransmitReceive_IT+0x10c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d103      	bne.n	8001e8a <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2205      	movs	r2, #5
 8001e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	887a      	ldrh	r2, [r7, #2]
 8001e9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_SPI_TransmitReceive_IT+0xce>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <HAL_SPI_TransmitReceive_IT+0x124>)
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <HAL_SPI_TransmitReceive_IT+0x128>)
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ec8:	e005      	b.n	8001ed6 <HAL_SPI_TransmitReceive_IT+0xda>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <HAL_SPI_TransmitReceive_IT+0x12c>)
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <HAL_SPI_TransmitReceive_IT+0x130>)
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001ee4:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	d008      	beq.n	8001f06 <HAL_SPI_TransmitReceive_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e000      	b.n	8001f08 <HAL_SPI_TransmitReceive_IT+0x10c>
  }

error :
 8001f06:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	080021ed 	.word	0x080021ed
 8001f24:	0800224d 	.word	0x0800224d
 8001f28:	08002131 	.word	0x08002131
 8001f2c:	08002191 	.word	0x08002191

08001f30 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
    return;
 8001f6e:	e0b1      	b.n	80020d4 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_SPI_IRQHandler+0x5e>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
    return;
 8001f8c:	e0a2      	b.n	80020d4 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 809d 	beq.w	80020d4 <HAL_SPI_IRQHandler+0x1a4>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8097 	beq.w	80020d4 <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d011      	beq.n	8001fe0 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f043 0204 	orr.w	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	e00b      	b.n	8001ff8 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
        return;
 8001ff6:	e06d      	b.n	80020d4 <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d014      	beq.n	800202c <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f043 0208 	orr.w	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03c      	beq.n	80020d2 <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002066:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d104      	bne.n	8002084 <HAL_SPI_IRQHandler+0x154>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d022      	beq.n	80020ca <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0203 	bic.w	r2, r2, #3
 8002092:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_SPI_IRQHandler+0x1ac>)
 80020a2:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fe85 	bl	8000db8 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <HAL_SPI_IRQHandler+0x1a2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_SPI_IRQHandler+0x1ac>)
 80020bc:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fe78 	bl	8000db8 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80020c8:	e003      	b.n	80020d2 <HAL_SPI_IRQHandler+0x1a2>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f812 	bl	80020f4 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 80020d0:	e7ff      	b.n	80020d2 <HAL_SPI_IRQHandler+0x1a2>
 80020d2:	bf00      	nop
  }
}
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	08002109 	.word	0x08002109

080020e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
  */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7ff ffe6 	bl	80020f4 <HAL_SPI_ErrorCallback>
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <SPI_2linesRxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f103 020c 	add.w	r2, r3, #12
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	1c58      	adds	r0, r3, #1
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	6388      	str	r0, [r1, #56]	; 0x38
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* check end of the reception */
  if(hspi->RxXferCount == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <SPI_2linesRxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002176:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <SPI_2linesRxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f95e 	bl	8002444 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <SPI_2linesTxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	1c59      	adds	r1, r3, #1
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6311      	str	r1, [r2, #48]	; 0x30
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	320c      	adds	r2, #12
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	7013      	strb	r3, [r2, #0]
  hspi->TxXferCount--;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* check the end of the transmission */
  if(hspi->TxXferCount == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10f      	bne.n	80021e4 <SPI_2linesTxISR_8BIT+0x54>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d2:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <SPI_2linesTxISR_8BIT+0x54>
    {
      SPI_CloseRxTx_ISR(hspi);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f930 	bl	8002444 <SPI_CloseRxTx_ISR>
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <SPI_2linesRxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	b292      	uxth	r2, r2
 8002200:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	1c9a      	adds	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	87da      	strh	r2, [r3, #62]	; 0x3e

  if(hspi->RxXferCount == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002232:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f900 	bl	8002444 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <SPI_2linesTxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	1c9a      	adds	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if(hspi->TxXferCount == 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8d1 	bl	8002444 <SPI_CloseRxTx_ISR>
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f103 020c 	add.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	1c58      	adds	r0, r3, #1
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	6388      	str	r0, [r1, #56]	; 0x38
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <SPI_RxISR_8BIT+0x3e>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f922 	bl	800252c <SPI_CloseRx_ISR>
  }
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	b292      	uxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	1c9a      	adds	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f8ff 	bl	800252c <SPI_CloseRx_ISR>
  }
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002344:	e04d      	b.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800234c:	d049      	beq.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002354:	f7fe fbf2 	bl	8000b3c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d83e      	bhi.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002372:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237c:	d111      	bne.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002386:	d004      	beq.n	8002392 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002390:	d107      	bne.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023aa:	d110      	bne.n	80023ce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80023ba:	400b      	ands	r3, r1
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e00e      	b.n	8002400 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d101      	bne.n	80023f6 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80023f2:	2201      	movs	r2, #1
 80023f4:	e000      	b.n	80023f8 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80023f6:	2200      	movs	r2, #0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d1a3      	bne.n	8002346 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7ff ff89 	bl	8002336 <SPI_WaitFlagStateUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e000      	b.n	800243c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <SPI_CloseRxTx_ISR>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <SPI_CloseRxTx_ISR+0xe0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a34      	ldr	r2, [pc, #208]	; (8002528 <SPI_CloseRxTx_ISR+0xe4>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	2264      	movs	r2, #100	; 0x64
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	613b      	str	r3, [r7, #16]
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002464:	f7fe fb6a 	bl	8000b3c <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0220 	bic.w	r2, r2, #32
 8002478:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	613a      	str	r2, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <SPI_CloseRxTx_ISR+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002490:	e006      	b.n	80024a0 <SPI_CloseRxTx_ISR+0x5c>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ec      	beq.n	800247a <SPI_CloseRxTx_ISR+0x36>
  
  /* Check the end of the transaction */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart)!=HAL_OK)
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	2164      	movs	r1, #100	; 0x64
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffaf 	bl	8002408 <SPI_CheckFlag_BSY>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d115      	bne.n	800250e <SPI_CloseRxTx_ISR+0xca>
    {
      if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d107      	bne.n	80024fe <SPI_CloseRxTx_ISR+0xba>
      {
      	hspi->State = HAL_SPI_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe f986 	bl	8000808 <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80024fc:	e00e      	b.n	800251c <SPI_CloseRxTx_ISR+0xd8>
      	hspi->State = HAL_SPI_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fdea 	bl	80020e0 <HAL_SPI_TxRxCpltCallback>
}
 800250c:	e006      	b.n	800251c <SPI_CloseRxTx_ISR+0xd8>
      hspi->State = HAL_SPI_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fdec 	bl	80020f4 <HAL_SPI_ErrorCallback>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000000 	.word	0x20000000
 8002528:	057619f1 	.word	0x057619f1

0800252c <SPI_CloseRx_ISR>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002542:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254c:	d111      	bne.n	8002572 <SPI_CloseRx_ISR+0x46>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002556:	d004      	beq.n	8002562 <SPI_CloseRx_ISR+0x36>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d107      	bne.n	8002572 <SPI_CloseRx_ISR+0x46>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002570:	601a      	str	r2, [r3, #0]
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <SPI_CloseRx_ISR+0x64>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    }
    hspi->State = HAL_SPI_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <SPI_CloseRx_ISR+0x7c>
      {
        HAL_SPI_RxCpltCallback(hspi);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe f931 	bl	8000808 <HAL_SPI_RxCpltCallback>
        HAL_SPI_ErrorCallback(hspi);
      }
#if (USE_SPI_CRC != 0U)
    }
#endif /* USE_SPI_CRC */
}
 80025a6:	e002      	b.n	80025ae <SPI_CloseRx_ISR+0x82>
        HAL_SPI_ErrorCallback(hspi);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fda3 	bl	80020f4 <HAL_SPI_ErrorCallback>
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <__libc_init_array>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	4d0d      	ldr	r5, [pc, #52]	; (80025f0 <__libc_init_array+0x38>)
 80025bc:	4c0d      	ldr	r4, [pc, #52]	; (80025f4 <__libc_init_array+0x3c>)
 80025be:	1b64      	subs	r4, r4, r5
 80025c0:	10a4      	asrs	r4, r4, #2
 80025c2:	2600      	movs	r6, #0
 80025c4:	42a6      	cmp	r6, r4
 80025c6:	d109      	bne.n	80025dc <__libc_init_array+0x24>
 80025c8:	4d0b      	ldr	r5, [pc, #44]	; (80025f8 <__libc_init_array+0x40>)
 80025ca:	4c0c      	ldr	r4, [pc, #48]	; (80025fc <__libc_init_array+0x44>)
 80025cc:	f000 f820 	bl	8002610 <_init>
 80025d0:	1b64      	subs	r4, r4, r5
 80025d2:	10a4      	asrs	r4, r4, #2
 80025d4:	2600      	movs	r6, #0
 80025d6:	42a6      	cmp	r6, r4
 80025d8:	d105      	bne.n	80025e6 <__libc_init_array+0x2e>
 80025da:	bd70      	pop	{r4, r5, r6, pc}
 80025dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e0:	4798      	blx	r3
 80025e2:	3601      	adds	r6, #1
 80025e4:	e7ee      	b.n	80025c4 <__libc_init_array+0xc>
 80025e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ea:	4798      	blx	r3
 80025ec:	3601      	adds	r6, #1
 80025ee:	e7f2      	b.n	80025d6 <__libc_init_array+0x1e>
 80025f0:	08002638 	.word	0x08002638
 80025f4:	08002638 	.word	0x08002638
 80025f8:	08002638 	.word	0x08002638
 80025fc:	0800263c 	.word	0x0800263c

08002600 <memset>:
 8002600:	4402      	add	r2, r0
 8002602:	4603      	mov	r3, r0
 8002604:	4293      	cmp	r3, r2
 8002606:	d100      	bne.n	800260a <memset+0xa>
 8002608:	4770      	bx	lr
 800260a:	f803 1b01 	strb.w	r1, [r3], #1
 800260e:	e7f9      	b.n	8002604 <memset+0x4>

08002610 <_init>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr

0800261c <_fini>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr
